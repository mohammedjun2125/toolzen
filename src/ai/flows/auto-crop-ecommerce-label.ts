// Auto-generated by genkit-studio
'use server';
/**
 * @fileOverview Automatically crops e-commerce shipping labels from images or PDFs.
 *
 * - autoCropEcommerceLabel - A function that handles the cropping process.
 * - AutoCropEcommerceLabelInput - The input type for the autoCropEcommerceLabel function.
 * - AutoCropEcommerceLabelOutput - The return type for the autoCropEcommerceLabel function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AutoCropEcommerceLabelInputSchema = z.object({
  labelDataUri: z
    .string()
    .describe(
      "A shipping label image or PDF, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type AutoCropEcommerceLabelInput = z.infer<typeof AutoCropEcommerceLabelInputSchema>;

const AutoCropEcommerceLabelOutputSchema = z.object({
  croppedLabelDataUri: z
    .string()
    .describe('The cropped shipping label as a data URI.'),
});
export type AutoCropEcommerceLabelOutput = z.infer<typeof AutoCropEcommerceLabelOutputSchema>;

export async function autoCropEcommerceLabel(
  input: AutoCropEcommerceLabelInput
): Promise<AutoCropEcommerceLabelOutput> {
  return autoCropEcommerceLabelFlow(input);
}

const prompt = ai.definePrompt({
  name: 'autoCropEcommerceLabelPrompt',
  input: {schema: AutoCropEcommerceLabelInputSchema},
  output: {schema: AutoCropEcommerceLabelOutputSchema},
  prompt: `You are an AI assistant specialized in processing e-commerce shipping labels.
  Your task is to automatically identify and crop the label from the given image or PDF to remove unnecessary surroundings, and generate a data URI for a cropped image.

  Input: {{media url=labelDataUri}}
  Output: A data URI of the cropped shipping label image.
  Ensure that the output is a valid data URI.
  `,
});

const autoCropEcommerceLabelFlow = ai.defineFlow(
  {
    name: 'autoCropEcommerceLabelFlow',
    inputSchema: AutoCropEcommerceLabelInputSchema,
    outputSchema: AutoCropEcommerceLabelOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
